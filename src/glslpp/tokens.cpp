#include "glslppafx.h"

#include "tokens.h"

GLSLTokenID DetermineIdentifierSubtype(const std::string& _match, const GLSLTokenID _initialToken, StateObjectGLSL* _state);

// ------------------------------------------------------------------------------------------------
const char* glslReservedTypes[] = {
    "bool",
    "float", 
    "double", 
    "int", 
    "uint", 
    "bvec2", 
    "bvec3", 
    "bvec4", 
    "ivec2", 
    "ivec3", 
    "ivec4", 
    "uvec2", 
    "uvec3", 
    "uvec4", 
    "vec2", 
    "vec3", 
    "vec4", 
    "mat2", 
    "mat3", 
    "mat4", 
    "dvec2", 
    "dvec3", 
    "dvec4", 
    "dmat2", 
    "dmat3", 
    "dmat4", 
    "mat2x2", 
    "mat2x3", 
    "mat2x4", 
    "mat3x2", 
    "mat3x3", 
    "mat3x4", 
    "mat4x2", 
    "mat4x3", 
    "mat4x4", 
    "dmat2x2", 
    "dmat2x3", 
    "dmat2x4", 
    "dmat3x2", 
    "dmat3x3", 
    "dmat3x4", 
    "dmat4x2", 
    "dmat4x3", 
    "dmat4x4", 
    "sampler1D", 
    "sampler2D", 
    "sampler3D", 
    "samplerCube", 
    "sampler1DShadow", 
    "sampler2DShadow", 
    "samplerCubeShadow", 
    "sampler1DArray", 
    "sampler2DArray", 
    "sampler1DArrayShadow", 
    "sampler2DArrayShadow", 
    "isampler1D", 
    "isampler2D", 
    "isampler3D", 
    "isamplerCube", 
    "isampler1DArray", 
    "isampler2DArray", 
    "usampler1D", 
    "usampler2D", 
    "usampler3D", 
    "usamplerCube", 
    "usampler1DArray", 
    "usampler2DArray", 
    "sampler2DRect", 
    "sampler2DRectShadow", 
    "isampler2DRect", 
    "usampler2DRect", 
    "samplerBuffer", 
    "isamplerBuffer", 
    "usamplerBuffer", 
    "samplerCubeArray", 
    "samplerCubeArrayShadow", 
    "isamplerCubeArray", 
    "usamplerCubeArray", 
    "sampler2DMS", 
    "isampler2DMS", 
    "usampler2DMS", 
    "sampler2DMSArray", 
    "isampler2DMSArray", 
    "usampler2DMSArray", 

    nullptr
};

// ------------------------------------------------------------------------------------------------
const LexicalEntry<GLSLTokenID, StateObjectGLSL> glslTokens[] = {
    { "[ \t\n]+"                                , IGNORETOKEN      , nullptr },
    { "attribute"                               , ATTRIBUTE        , nullptr },
    { "const"                                   , CONST            , nullptr },
    { "break"                                   , BREAK            , nullptr },
    { "continue"                                , CONTINUE         , nullptr },
    { "do"                                      , DO               , nullptr },
    { "else"                                    , ELSE             , nullptr },
    { "for"                                     , FOR              , nullptr },
    { "if"                                      , IF               , nullptr },
    { "discard"                                 , DISCARD          , nullptr },
    { "return"                                  , RETURN           , nullptr },
    { "switch"                                  , SWITCH           , nullptr },
    { "case"                                    , CASE             , nullptr },
    { "default"                                 , DEFAULT          , nullptr },
    { "subroutine"                              , SUBROUTINE       , nullptr },
    { "centroid"                                , CENTROID         , nullptr },
    { "in"                                      , IN               , nullptr },
    { "out"                                     , OUT              , nullptr },
    { "inout"                                   , INOUT            , nullptr },
    { "uniform"                                 , UNIFORM          , nullptr },
    { "varying"                                 , VARYING          , nullptr },
    { "patch"                                   , PATCH            , nullptr },
    { "sample"                                  , SAMPLE           , nullptr },
    { "noperspective"                           , NOPERSPECTIVE    , nullptr },
    { "flat"                                    , FLAT             , nullptr },
    { "smooth"                                  , SMOOTH           , nullptr },
    { "layout"                                  , LAYOUT           , nullptr },
    { "struct"                                  , STRUCT           , nullptr },
    { "void"                                    , VOID             , nullptr },
    { "while"                                   , WHILE            , nullptr },
    { "<<"                                      , LEFT_OP          , nullptr },
    { ">>"                                      , RIGHT_OP         , nullptr },
    { "\\+\\+"                                  , INC_OP           , nullptr },
    { "--"                                      , DEC_OP           , nullptr },
    { "<="                                      , LE_OP            , nullptr },
    { ">="                                      , GE_OP            , nullptr },
    { "=="                                      , EQ_OP            , nullptr },
    { "!="                                      , NE_OP            , nullptr },
    { "&&"                                      , AND_OP           , nullptr },
    { "\\|\\|"                                  , OR_OP            , nullptr },
    { "\\^\\^"                                  , XOR_OP           , nullptr },
    { "\\*="                                    , MUL_ASSIGN       , nullptr },
    { "/="                                      , DIV_ASSIGN       , nullptr },
    { "\\+="                                    , ADD_ASSIGN       , nullptr },
    { "%="                                      , MOD_ASSIGN       , nullptr },
    { "<<="                                     , LEFT_ASSIGN      , nullptr },
    { ">>="                                     , RIGHT_ASSIGN     , nullptr },
    { "&="                                      , AND_ASSIGN       , nullptr },
    { "\\^="                                    , XOR_ASSIGN       , nullptr },
    { "\\|="                                    , OR_ASSIGN        , nullptr },
    { "-="                                      , SUB_ASSIGN       , nullptr },
    { "\\("                                     , LEFT_PAREN       , nullptr },
    { "\\)"                                     , RIGHT_PAREN      , nullptr },
    { "\\["                                     , LEFT_BRACKET     , nullptr },
    { "\\]"                                     , RIGHT_BRACKET    , nullptr },
    { "\\{"                                     , LEFT_BRACE       , nullptr },
    { "\\}"                                     , RIGHT_BRACE      , nullptr },
    { "\\."                                     , DOT              , nullptr },
    { ","                                       , COMMA            , nullptr },
    { ":"                                       , COLON            , nullptr },
    { "="                                       , EQUAL            , nullptr },
    { ";"                                       , SEMICOLON        , nullptr },
    { "!"                                       , BANG             , nullptr },
    { "-"                                       , DASH             , nullptr },
    { "~"                                       , TILDE            , nullptr },
    { "\\+"                                     , PLUS             , nullptr },
    { "\\*"                                     , STAR             , nullptr },
    { "/"                                       , SLASH            , nullptr },
    { "%"                                       , PERCENT          , nullptr },
    { "<"                                       , LEFT_ANGLE       , nullptr },
    { ">"                                       , RIGHT_ANGLE      , nullptr },
    { "\\|"                                     , VERTICAL_BAR     , nullptr },
    { "\\^"                                     , CARET            , nullptr },
    { "&"                                       , AMPERSAND        , nullptr },
    { "\\?"                                     , QUESTION         , nullptr },
    { "invariant"                               , INVARIANT        , nullptr },
    { "highp"                                   , HIGH_PRECISION   , nullptr },
    { "mediump"                                 , MEDIUM_PRECISION , nullptr },
    { "lowp"                                    , LOW_PRECISION    , nullptr },
    { "precision"                               , PRECISION        , nullptr },
    { "false|true"                              , BOOLCONSTANT     , nullptr },
    { "[_a-zA-Z][_a-zA-Z0-9]*"                  , IDENTIFIER       , DetermineIdentifierSubtype },
    { "[0-9]+\\.[0-9]*([eE][-+]?[0-9]+)?[fF]?"  , FLOATCONSTANT    , nullptr },
    { "[0-9]*\\.[0-9]+([eE][-+]?[0-9]+)?[fF]?"  , FLOATCONSTANT    , nullptr },
    { "[0-9]+[eE][-+]?[0-9]+[fF]?"              , FLOATCONSTANT    , nullptr },
    { "[1-9][0-9]*[uU]"                         , UINTCONSTANT     , nullptr },
    { "[1-9][0-9]*"                             ,  INTCONSTANT     , nullptr },
    { "[0-7]+[uU]"                              , UINTCONSTANT     , nullptr },
    { "[0-7]+"                                  ,  INTCONSTANT     , nullptr },
    { "0[xX][0-9a-fA-F]+[uU]"                   , UINTCONSTANT     , nullptr },
    { "0[xX][0-9a-fA-F]+"                       ,  INTCONSTANT     , nullptr },
    { "."                                       , REJECTTOKEN      , nullptr },
    { nullptr                                   , REJECTTOKEN      , nullptr },
};

// ------------------------------------------------------------------------------------------------
GLSLTokenID DetermineIdentifierSubtype(const std::string& _match, const GLSLTokenID _initialToken, StateObjectGLSL* _state)
{
    return _initialToken;
}

